#! /usr/bin/python
#coding:UTF-8
'''
    @author: neptune
    @time: 2014-02-20
    @descript: 主要记录Pyhon中一些常用的东西.建议宽屏阅读使用
'''
import sys

def demo_help():
    print "快速查找:利用编辑的查找功能查找@关键字。"
    print "\t例如：查找list相关的东西：输入@list"
    print "\t查看运行结果:shell$ ./man.py list"


#===========================================================================================================
#@list
#    演示list相关的用法
#===========================================================================================================
def demo_list():
    "演示list相关的用法"
    print "list类型：属于一种集合类型，它非常灵活，支持在源处修改，可按需增长缩短，可以包含任何类型的对象亦可嵌套"
    
    #define list variable 定义list类型的变量
    li1 = [];
    li2 = [1,2,3,4,5]   
    li3 = [1,2,3,'4',5]
    li4 = [1,'snakeam',['am','pm'],'fun']
    li5 = list("list-variable")
    li6 = list(range(-4,4))
    print "li1:",type(li1),"+\t",li1
    print "li2:",type(li1),"+\t",li2
    print "li3:",type(li1),"+\t",li3
    print "li4:",type(li1),"+\t",li4
    print "li5:",type(li1),"+\t",li5
    print "li6:",type(li1),"+\t",li6
    
    #index  form 0-index
    print li2[0]
    print li3[3]
    print li4[1][1]
    
    #split
    print li2[:3]       #取前三个元素，返回list
    print li3[3:]       #取第三个以后的元素，返回list
    print li3[2:4]      #从第三个开始取到第五个但不包括5
    print li3[-1:]      #取最后一个
    
    #add or del
    li1.append("hello")
    print li1
    li1.insert(0, "xcx")
    print li1
    li1[0:0] =['hmj']
    print li1
    li1[1:1] =['zxy']
    print li1
    li1[len(li1):1]=['world']
    print li1
    li1[-1] =['!','wan an']
    print li1
    
    del li1[0]
    print li1
    li1.remove(li1[0])
    print li1
    li1[2][0:1]=['I']
    print li1
    li1.pop()
    print li1
    
    #len
    print "li1's length",len(li1)
    
    #iterator
    listdemo = [x** 2 for x in li2]
    print listdemo
    
    
    for x in li2:print x*2
    #filter element : if expresstion
    li = [x *2 for x in li1 if x > 2]
    print li
    #
    #         list的方法
    #         L.append(var) #追加元素
    #         L.insert(index,var)
    #         L.pop(var) #返回最后一个元素，并从list中删除之
    #         L.remove(var) #删除第一次出现的该元素
    #         L.count(var) #该元素在列表中出现的个数
    #         L.index(var) #该元素的位置,无则抛异常
    #         L.extend(list) #追加list，即合并list到L上
    #         L.sort() #排序
    #         L.reverse() #倒序
    #         list 操作符:,+,*，关键字del
    #         a[1:] #片段操作符，用于子list的提取
    #         [1,2]+[3,4] #为[1,2,3,4]。同extend()
    #         [2]*4 #为[2,2,2,2]
    #         del L[1] #删除指定下标的元素
    #         del L[1:3] #删除指定下标范围的元素
    #         list的复制
    #         L1 = L #L1为L的别名，用C来说就是指针地址相同，对L1操作即对L操作。函数参数就是这样传递的
    #         L1 = L[:] #L1为L的克隆，即另一个拷贝。
#===========================================================================================================
#@dict
#    演示dict相关的用法
#===========================================================================================================
def demo_dict():
    """演示dict的常用操作"""
    #静态的创建一个字典
    d1 = {}                                      #创建一个空字典
    print d1
    d2 = {'name':'snakeam','skill':'decode'}     #创建有俩想的字典
    print d2
    d3 = {'food':{'ham':1,'egg':2}}              #字典的嵌套
    #Python 3.x
    #d4 = dict(name='xcx',skill='god'）
    print d3
    # print d4
    #动态构造一个字典
    #在Python3.x和Python2.x中字典可以用字典解析来创建。
    #字典解析运行一个隐士循环，根据每次迭代的收集表达式键/值结果来填充一个新的字典
    #动态初始化一个字典的标准方法都是：将其键和值对应起来传递个dict调用
    #zip函数是在一个单个调用中从键和值的列表来构建一个字典的方式之一
    li =['a','b','c']
    li2 =[1,2,3,4]
    d5 = dict(zip(li,li2))
    print d5
    
    #演示dict字典的取值
    print d2['name']
    print d3['food']['egg']
    #dict.get(key,0) 如果没有则返回默认值，[key]方式没有则抛出异常
    print d2.get('age',100)
    
    #成员关系：键是否存在测试
    print ('ham' in d3)
    #has_key(key)判断字典是否包含莫个键
    print d2.has_key('age')
    
    
    #Python2.x
    list_key = d5.keys()
    print "type=>",type(list_key)       #list
    print list_key                      #['a','b','c']
    
    list_value = d5.values()
    print "type=>",type(list_value)     #list
    print list_value                    #[1,2,3]
    
    list_item = d5.items()
    print "type=>",type(list_item)      #list
    print list_item                     #[('a',1),('b',2),('c',3)]
    #python3.x
    #keys,values,items都返回试图对象，而不向Python2.x中返回实际的结果集列表
    #视图对象是可迭代。这就意味着每次产生一个结果集项，而不是在内存中直接生存列表
    #视图保存了字典的最初顺，但他们不支持索引和列表的sort等方法。打印时也不现实自己的项
    
    
    
    
#===========================================================================================================
if __name__ == "__main__":
    #print sys.argv
    if len(sys.argv) ==2:
        selfMod = __import__(__name__)
        return_function = getattr(selfMod,"demo_%s" % sys.argv[1])
        if(callable(selfMod.return_function) and callable(selfMod.return_function)):
                return_function()
    else:
        demo_help()
